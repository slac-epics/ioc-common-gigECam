#
# Timestamp and EventCode support
#
# Contains record to add camera trigger delay to camera
# image acquisition time from trigger till when the timestamp is updated.
#
# Db records to compute timestamp delays and to propagate beam
# event code to timeStampSource PV.
#
# Required macros:
#	CAM				- Prefix for camera
#	TSS				- Prefix for timeStampFifo PVs
#	CAM_TRIG		- Prefix for EVR trigger
#
# Optional macros:
#	CAM_DLY			- PV to write camera trigger delay to,  typically $CAM_TRIG:TDES
#	CAM_DLY_EGU		- EGU for camera delay, defaults to ns
#	CAM_DLY_SCALE	- Scale factor for coverting camera delay to sec, defaults to 1e9
#	TSDLY_PV		- PV to write timestamp delay to, default to $(TSS):ExpectedDelay
#

record( ao, "$(CAM):CamTrigDelay" )
{
#field( TPRO, "$(TPRO=2)" )
	field( PREC, "4" )
	field( EGU,  "sec" )
	field( FLNK, "$(CAM):CamTrigDelayCalc" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV     DESC HOPR LOPR PREC VAL" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR PREC VAL" )
}

# This record calculates the EVR trigger delay and writes it to the
# appropriate EVR record via macro CAM_DLY
record( calcout, "$(CAM):CamTrigDelayCalc" )
{
#	field( SDIS, "$(CAM_TRIG):STARTING_UP" )
	field( INPA, "$(CAM):CamTrigDelay NPP MS" )
	field( INPB, "$(CAM):CamDelayScale NPP MS" )
	field( CALC, "FLOOR(A*B)" )
	field( OOPT, "On Change" )
	field( OUT,  "$(CAM_DLY=) PP MS" )
	field( EGU,  "$(CAM_DLY_EGU=ns)" )
	field( PREC, "4" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV     DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}

record( longout, "$(CAM):CamDelayScale" )
{
	field( DOL,  "$(CAM_DLY_SCALE=1000000000)" )
	field( EGU,  "$(CAM_DLY_EGU=ns)" )
	field( PINI, "YES" )
	field( FLNK, "$(CAM):CamTrigDelayCalc" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
}

record( calcout, "$(CAM):CamTrigDelay_RBV" )
{
#field( TPRO, "$(TPRO=2)" )
#	field( SCAN, "1 second" )
	field( SDIS, "$(CAM_TRIG):STARTING_UP CP NMS" )
	field( INPA, "$(CAM_DLY=unused) CP MS" )
	field( INPB, "$(CAM):CamDelayScale CP MS" )
	field( CALC, "B==0?A:(A/B)" )
	field( EGU,  "sec" )
	field( PREC, "4" )
	field( OOPT, "On Change" )
	field( IVOA, "Don't drive outputs" )
	field( OUT,  "$(CAM):CamTrigDelay PP MS" )
#	field( PINI, "YES"
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV     DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}

#
# ExpectedDelay_Calc:
#   Calculates expected delay from trigger to timeStamp update 
# Inputs: All units in seconds
#	A	- Camera trigger delay
#	B	- Camera trigger to timestamp delay
record( calcout, "$(CAM):ExpectedDelay_Calc" )
{
    field( INPA, "$(CAM):CamTrigDelay_RBV CP MS" )
    field( INPB, "$(CAM):TrigToTS_Calc CP MS" )
    field( CALC, "A+B" )
    field( EGU,  "sec" )
    field( PREC, "5" )
    field( OUT,  "$(TSDLY_PV=$(TSS):ExpectedDelay) PP MS" )
}

record( longout, "$(CAM):CamEventCode" )
{
#field( TPRO, "$(TPRO=2)" )
#	field( VAL,  "-1" )
	field( SDIS, "$(CAM_TRIG):STARTING_UP" )
	field( OUT,  "$(CAM_TRIG):TEC PP NMS" )
# Dropping PINI and autosave of VAL field as it's already autosaved via the EVR trigger event code
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
}

# Use CA to monitor and update when EVR event code changes
record( longin, "$(CAM):CamEventCode_RBV" )
{
#field( TPRO, "$(TPRO=2)" )
#	field( SCAN, "1 second" )
	field( SDIS, "$(CAM_TRIG):STARTING_UP CP NMS" )
	field( INP,  "$(CAM_TRIG):EC_RBV CP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC VAL" )
	field( FLNK, "$(CAM):CamEventCodeCalc" )
}
# This record keeps CAM event codes in sync if user changes EVR directly
record( calcout, "$(CAM):CamEventCodeCalc" )
{
	field( INPA, "$(CAM):CamEventCode NPP NMS" )
	field( INPB, "$(CAM):CamEventCode_RBV NPP MS" )
	field( CALC, "A!=B&&B!=0" )
	field( OOPT, "When Non-zero" )
	field( DOPT, "Use OCAL" )
	field( OCAL, "B" )
	field( OUT,  "$(CAM):CamEventCode PP MS" )
	field( PREC, "0" )
}

record( ai, "$(CAM):CamRepRate_RBV" )
{
	field( INP, "$(CAM_TRIG):RATE CPP MS" )
	field( EGU,  "Hz" )
	field( PREC, "1" )
	field( FLNK, "$(CAM):CamRepDur" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}

record( calc, "$(CAM):CamRepDur" )
{
	field( INPA, "$(CAM,undefined):CamRepRate_RBV CPP MS" )
	field( CALC, "A==0?10:(1/A)" )
	field( EGU,  "sec" )
	field( PREC, "3" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}


# This record monitors the trigger mode and puts the timestamp source
# into freeRun mode while the camera is in freeRun.
# $(CAM):TriggerMode_RBV is assumed to keep ADCore's 0==Internal
record( calcout, "$(CAM):TsFreeRunCalc" )
{
    field( DESC, "Update TS FreeRun mode" )
	field( INPA, "$(CAM):TriggerMode_RBV CPP NMS" )
    field( CALC, "A==0?1:0" )
	field( OUT,  "$(TSS):TsFreeRun PP NMS" )
	info( autosaveFields, "DESC" )
}

record( bo, "$(TSS):TsFreeRun" ) { }
record( ao, "$(TSS):ExpectedDelay" ) { }
